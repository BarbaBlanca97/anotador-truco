{"version":3,"sources":["counter/counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","state","points","stage","lineLength","offsetX","offsetY","box","mask","x1","y1","x2","y2","renderLine","bind","renderLines","addPoint","subtractPoint","this","setState","nextPoints","setTimeout","onWin","lines","i","push","key","stroke","strokeWidth","strokeLinecap","stageIndicatorColorStyle","color","className","title","style","width","height","onClick","React","Component","App","finished","winner","handleWin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f17bb85d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\n\r\nclass Counter extends React.Component {\r\n    \r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            points: 0\r\n        }\r\n\r\n        this.stage      = 'Malas';\r\n        this.lineLength = 90;\r\n        this.offsetX    = 5;\r\n        this.offsetY    = 7;\r\n        this.box        = 0;\r\n\r\n        this.mask = [\r\n            { \r\n                x1: 0, y1: 0, \r\n                x2: this.lineLength, y2: 0 \r\n            },\r\n            { \r\n                x1: 0, y1: 0, \r\n                x2: 0, y2: this.lineLength \r\n            },\r\n            { \r\n                x1: 0, y1: this.lineLength, \r\n                x2: this.lineLength, y2: this.lineLength \r\n            },\r\n            { \r\n                x1: this.lineLength, y1: 0, \r\n                x2: this.lineLength, y2: this.lineLength \r\n            },\r\n            { \r\n                x1: 0, y1: 0, \r\n                x2: this.lineLength, y2: this.lineLength }\r\n        ];\r\n\r\n        this.renderLine     = this.renderLine.bind(this);\r\n        this.renderLines    = this.renderLines.bind(this);\r\n        this.addPoint       = this.addPoint.bind(this);\r\n        this.subtractPoint  = this.subtractPoint.bind(this);\r\n    }\r\n\r\n    addPoint () {\r\n        this.setState(state => {\r\n            if (this.stage === 'Buenas' && state.points === 15) return null;\r\n\r\n            let nextPoints = state.points + 1;\r\n\r\n            if(nextPoints === 16) {\r\n                this.stage = 'Buenas';\r\n                nextPoints = 1;\r\n            }\r\n\r\n            if (nextPoints === 15 && this.stage === 'Buenas') setTimeout(this.props.onWin, 200);\r\n\r\n            return { points: nextPoints }\r\n        });\r\n    }\r\n\r\n    subtractPoint () {\r\n        this.setState(state => {\r\n            if (this.stage === 'Malas' && state.points === 0) return null;\r\n\r\n            let nextPoints = state.points - 1;\r\n\r\n            if (nextPoints === 0 && this.stage === 'Buenas') {\r\n                this.stage = 'Malas';\r\n                nextPoints = 15;\r\n            }\r\n\r\n            return { points: nextPoints }\r\n        });\r\n    }\r\n\r\n    renderLines () {\r\n        const lines = [];\r\n        let box = 0;\r\n        for (let i = 0; i < this.state.points; i++) {\r\n            if (i / 5 === ( 1 + box )) ++box;\r\n            lines.push(this.renderLine(this.mask[i % 5], box, i));\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    renderLine ({ x1, y1, x2, y2 }, box, key) {\r\n        return <line \r\n        x1={ x1 + this.offsetX } \r\n        y1={ y1 + this.offsetY + (box * (this.offsetY + this.lineLength)) } \r\n        \r\n        x2={ x2 + this.offsetX } \r\n        y2={ y2 + this.offsetY + (box * (this.offsetY + this.lineLength)) } \r\n        \r\n        key={ key }\r\n        stroke=\"#000000\" \r\n        strokeWidth=\"5\"\r\n        strokeLinecap=\"round\"\r\n        />\r\n    }\r\n\r\n\r\n    render () {\r\n        const stageIndicatorColorStyle = { color: this.stage === 'Buenas' ? '#4287f5' : '#d92c16' }\r\n        return (\r\n            <div\r\n            className=\"counter-body\"\r\n            >\r\n                <h2>{ this.props.title }</h2>\r\n                <h3 \r\n                style={ stageIndicatorColorStyle } \r\n                >{ this.stage }</h3>\r\n                <svg\r\n                className=\"svg-canvas\"\r\n                width=\"100px\" \r\n                height=\"100%\"\r\n                >\r\n                    { this.renderLines() }\r\n                </svg>\r\n                <div>\r\n                    <button \r\n                    className=\"counter-button\"\r\n                    onClick={ this.addPoint }\r\n                    > + </button>\r\n                    <button \r\n                    className=\"counter-button\"\r\n                    onClick={ this.subtractPoint }\r\n                    > - </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport './App.css';\n\nimport Counter from './counter';\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      finished: false,\n      winner: ''\n    }\n\n  }\n\n  handleWin (winner) {\n    this.setState({ finished: true, winner });\n  }\n\n  render () {\n    return (\n    <div\n    className=\"app\"\n    >\n      <h1> Anotador de truco </h1>\n      <div\n      className=\"board\"\n      >\n        { this.state.finished ?\n        <div\n        className=\"finished-message\"\n        >\n          <h3>{ `Ganador: ${ this.state.winner }` }</h3>\n          <button\n          className=\"restart-button\"\n          onClick={ () => { this.setState({ finished: false }) } }\n          >\n            Reiniciar\n          </button>\n        </div>\n        :\n        <>\n          <Counter\n          title=\"Nosotros\"\n          onWin={ () => { this.handleWin('Nosotros') } }\n          />\n\n          <Counter\n          title=\"Ellos\"\n          onWin={ () => { this.handleWin('Ellos') } }\n          />\n        </>\n        }\n      </div>\n      <div\n      className=\"footer\"\n      >\n        <span> @barbablanca97 - jere.chiosso@gmail.com.ar </span>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}